{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "75dced99",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Status: Optimal\n",
      "Vehicle 0: [0]\n",
      "Vehicle 1: [0]\n",
      "Vehicle 2: [2]\n",
      "Vehicle 3: [8]\n",
      "Vehicle 4: [0]\n",
      "Vehicle 5: [0]\n",
      "Vehicle 6: [6]\n",
      "Vehicle 7: [0]\n",
      "Vehicle 8: [0]\n",
      "Vehicle 9: [0]\n",
      "Vehicle 10: [1]\n",
      "Vehicle 11: [0]\n",
      "Vehicle 12: [0]\n",
      "Vehicle 13: [3]\n",
      "Vehicle 14: [4]\n",
      "Vehicle 15: [0]\n",
      "Vehicle 16: [0]\n",
      "Vehicle 17: [0]\n",
      "Vehicle 18: [5]\n",
      "Vehicle 19: [7]\n",
      "Vehicle 20: [0]\n",
      "Vehicle 21: [0]\n",
      "Vehicle 22: [0]\n",
      "Vehicle 23: [0]\n",
      "Vehicle 24: [0]\n",
      "Total Cost: 130.0\n"
     ]
    }
   ],
   "source": [
    "import pulp\n",
    "\n",
    "# Data\n",
    "vehicle_capacity = 200\n",
    "num_vehicles = 25\n",
    "num_customers = 9\n",
    "\n",
    "customers = [\n",
    "    (0, 40, 50, 0, 0, 1236, 0),\n",
    "    (1, 45, 68, 10, 912, 967, 90),\n",
    "    (2, 45, 70, 30, 825, 870, 90),\n",
    "    (3, 42, 66, 10, 65, 146, 90),\n",
    "    (4, 42, 68, 10, 727, 782, 90),\n",
    "    (5, 42, 65, 10, 15, 67, 90),\n",
    "    (6, 40, 69, 20, 621, 702, 90),\n",
    "    (7, 40, 66, 20, 170, 225, 90),\n",
    "    (8, 38, 68, 20, 255, 324, 90)\n",
    "]\n",
    "\n",
    "# Create a binary variable for each vehicle-customer combination\n",
    "variables = pulp.LpVariable.dicts(\"Route\", [(v, c) for v in range(num_vehicles) for c in range(num_customers)],\n",
    "                                 cat='Binary')\n",
    "\n",
    "# Create the 'prob' variable to contain the problem data\n",
    "prob = pulp.LpProblem(\"Vehicle_Routing_Problem\", pulp.LpMinimize)\n",
    "\n",
    "# Define the objective function\n",
    "prob += pulp.lpSum(customers[c][3] * variables[v, c] for v in range(num_vehicles) for c in range(num_customers)), \"Total_Cost\"\n",
    "\n",
    "# Constraint: Each customer must be visited exactly once by a vehicle\n",
    "for c in range(1, num_customers):\n",
    "    prob += pulp.lpSum(variables[v, c] for v in range(num_vehicles)) == 1, f\"Customer_{c}_Visit_Once\"\n",
    "\n",
    "# Constraint: Each vehicle must start and end at the depot (customer 0)\n",
    "for v in range(num_vehicles):\n",
    "    prob += pulp.lpSum(variables[v, c] for c in range(num_customers)) == 1, f\"Vehicle_{v}_Start_and_End_at_Depot\"\n",
    "\n",
    "# Constraint: Vehicle capacity not exceeded\n",
    "for v in range(num_vehicles):\n",
    "    prob += pulp.lpSum(customers[c][3] * variables[v, c] for c in range(num_customers)) <= vehicle_capacity, f\"Vehicle_{v}_Capacity_Constraint\"\n",
    "\n",
    "# Add more constraints for time windows, etc. as needed\n",
    "\n",
    "# Solve the problem\n",
    "prob.solve()\n",
    "\n",
    "# Print the results\n",
    "print(\"Status:\", pulp.LpStatus[prob.status])\n",
    "for v in range(num_vehicles):\n",
    "    route = [c for c in range(num_customers) if pulp.value(variables[v, c]) == 1]\n",
    "    print(f\"Vehicle {v}: {route}\")\n",
    "\n",
    "print(\"Total Cost:\", pulp.value(prob.objective))\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "f98349c2",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Vehicle\tTotal Cost\n",
      "0\t0\n",
      "1\t0\n",
      "2\t30\n",
      "3\t20\n",
      "4\t0\n",
      "5\t0\n",
      "6\t20\n",
      "7\t0\n",
      "8\t0\n",
      "9\t0\n",
      "10\t10\n",
      "11\t0\n",
      "12\t0\n",
      "13\t10\n",
      "14\t10\n",
      "15\t0\n",
      "16\t0\n",
      "17\t0\n",
      "18\t10\n",
      "19\t20\n",
      "20\t0\n",
      "21\t0\n",
      "22\t0\n",
      "23\t0\n",
      "24\t0\n",
      "Total Cost: 130.0\n"
     ]
    }
   ],
   "source": [
    "# Print the table of Total Cost\n",
    "print(\"Vehicle\\tTotal Cost\")\n",
    "for v in range(num_vehicles):\n",
    "    route = [c for c in range(num_customers) if pulp.value(variables[v, c]) == 1]\n",
    "    total_cost = sum(customers[c][3] for c in route)\n",
    "    print(f\"{v}\\t{total_cost}\")\n",
    "\n",
    "print(\"Total Cost:\", pulp.value(prob.objective))\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "4915ee2d",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "00e9b70a",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.13"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
