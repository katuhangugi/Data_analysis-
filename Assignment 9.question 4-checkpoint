{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "9801b161",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Error while connecting to PostgreSQL connection to server at \"127.0.0.1\", port 3306 failed: received invalid response to SSL negotiation: Y\n",
      "\n",
      "Unable to connect to the database.\n"
     ]
    }
   ],
   "source": [
    "import psycopg2\n",
    "\n",
    "# Function to connect to the PostgreSQL database\n",
    "def connect_to_db():\n",
    "    try:\n",
    "        conn = psycopg2.connect(\n",
    "            database=\"bookstore\",\n",
    "            user=\"root\",\n",
    "            password=\"\",\n",
    "            host=\"127.0.0.1\",\n",
    "            port=\"3306\",\n",
    "        )\n",
    "        return conn\n",
    "    except (Exception, psycopg2.Error) as error:\n",
    "        print(\"Error while connecting to PostgreSQL\", error)\n",
    "        return None\n",
    "\n",
    "# Command 1: Display all books in the database\n",
    "def display_all_books(conn):\n",
    "    try:\n",
    "        cursor = conn.cursor()\n",
    "        cursor.execute(\"SELECT Book_Name FROM BOOK;\")\n",
    "        books = cursor.fetchall()\n",
    "        for book in books:\n",
    "            print(book[0])\n",
    "        cursor.close()\n",
    "    except (Exception, psycopg2.Error) as error:\n",
    "        print(\"Error while fetching data from the database\", error)\n",
    "\n",
    "# Command 2: Display all books by a given author\n",
    "def display_books_by_author(conn):\n",
    "    author_name = input(\"Specify an author: \")\n",
    "    try:\n",
    "        cursor = conn.cursor()\n",
    "        cursor.execute(\n",
    "            \"SELECT Book_Name FROM BOOK WHERE Author_Name = %s;\", (author_name,)\n",
    "        )\n",
    "        books = cursor.fetchall()\n",
    "        if len(books) > 0:\n",
    "            for book in books:\n",
    "                print(book[0])\n",
    "        else:\n",
    "            print(\"No books found for the specified author.\")\n",
    "        cursor.close()\n",
    "    except (Exception, psycopg2.Error) as error:\n",
    "        print(\"Error while fetching data from the database\", error)\n",
    "\n",
    "# Command 3: Display all authors\n",
    "def display_all_authors(conn):\n",
    "    try:\n",
    "        cursor = conn.cursor()\n",
    "        cursor.execute(\"SELECT Author_Name FROM AUTHOR;\")\n",
    "        authors = cursor.fetchall()\n",
    "        for author in authors:\n",
    "            print(author[0])\n",
    "        cursor.close()\n",
    "    except (Exception, psycopg2.Error) as error:\n",
    "        print(\"Error while fetching data from the database\", error)\n",
    "\n",
    "# Command 4: Add a new Author\n",
    "def add_new_author(conn):\n",
    "    new_author_name = input(\"New author name? \")\n",
    "    try:\n",
    "        cursor = conn.cursor()\n",
    "        cursor.execute(\"INSERT INTO AUTHOR (Author_Name) VALUES (%s);\", (new_author_name,))\n",
    "        conn.commit()\n",
    "        print(\"New author added successfully.\")\n",
    "        cursor.close()\n",
    "    except (Exception, psycopg2.Error) as error:\n",
    "        print(\"Error while adding the new author to the database\", error)\n",
    "\n",
    "# Main function to display the menu and take user input\n",
    "def main():\n",
    "    conn = connect_to_db()\n",
    "    if conn is None:\n",
    "        print(\"Unable to connect to the database.\")\n",
    "        return\n",
    "\n",
    "    while True:\n",
    "        print(\"Menu:\")\n",
    "        print(\"1. Display all books in the database\")\n",
    "        print(\"2. Display all books by a given author\")\n",
    "        print(\"3. Display all authors\")\n",
    "        print(\"4. Add a new Author\")\n",
    "        print(\"5. Exit\")\n",
    "        choice = input(\"Enter your choice (1-4): \")\n",
    "\n",
    "        if choice == \"1\":\n",
    "            display_all_books(conn)\n",
    "        elif choice == \"2\":\n",
    "            display_books_by_author(conn)\n",
    "        elif choice == \"3\":\n",
    "            display_all_authors(conn)\n",
    "        elif choice == \"4\":\n",
    "            add_new_author(conn)\n",
    "        elif choice == \"5\":\n",
    "            conn.close()\n",
    "            print(\"Goodbye!\")\n",
    "            break\n",
    "        else:\n",
    "            print(\"Invalid choice. Please try again.\")\n",
    "\n",
    "if __name__ == \"__main__\":\n",
    "    main()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "de09c708",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Menu:\n",
      "1. Display all books in the database\n",
      "2. Display all books by a given author\n",
      "3. Display all authors\n",
      "4. Add a new Author\n",
      "5. Exit\n",
      "Enter your choice (1-4): 1\n",
      "Moby Dick\n",
      "Old Man and the Sea\n",
      "The Great Gatsby\n",
      "This Side of Paradise\n",
      "1984\n",
      "Pride and Prejudice\n",
      "To Kill a Mockingbird\n",
      "The Catcher in the Rye\n",
      "The Sorcerers Stone\n",
      "Menu:\n",
      "1. Display all books in the database\n",
      "2. Display all books by a given author\n",
      "3. Display all authors\n",
      "4. Add a new Author\n",
      "5. Exit\n",
      "Enter your choice (1-4): 2\n",
      "Specify an author: Steinbeck\n",
      "No books found for the specified author.\n",
      "Menu:\n",
      "1. Display all books in the database\n",
      "2. Display all books by a given author\n",
      "3. Display all authors\n",
      "4. Add a new Author\n",
      "5. Exit\n",
      "Enter your choice (1-4): 5\n",
      "Goodbye!\n"
     ]
    }
   ],
   "source": [
    "import mysql.connector\n",
    "\n",
    "# Function to connect to the MySQL database\n",
    "def connect_to_db():\n",
    "    try:\n",
    "        conn = mysql.connector.connect(\n",
    "           host=\"127.0.0.1\",\n",
    "           user=\"root\",\n",
    "           password=\"\",\n",
    "           database=\"bookstore\",\n",
    "        )\n",
    "        return conn\n",
    "    except mysql.connector.Error as error:\n",
    "        print(\"Error while connecting to MySQL database\", error)\n",
    "        return None\n",
    "\n",
    "# Command 1: Display all books in the database\n",
    "def display_all_books(conn):\n",
    "    try:\n",
    "        cursor = conn.cursor()\n",
    "        cursor.execute(\"SELECT Book_Name FROM BOOK;\")\n",
    "        books = cursor.fetchall()\n",
    "        for book in books:\n",
    "            print(book[0])\n",
    "        cursor.close()\n",
    "    except mysql.connector.Error as error:\n",
    "        print(\"Error while fetching data from the database\", error)\n",
    "\n",
    "# Command 2: Display all books by a given author\n",
    "def display_books_by_author(conn):\n",
    "    author_name = input(\"Specify an author: \")\n",
    "    try:\n",
    "        cursor = conn.cursor()\n",
    "        cursor.execute(\n",
    "            \"SELECT Book_Name FROM BOOK WHERE Author_Name = %s;\", (author_name,)\n",
    "        )\n",
    "        books = cursor.fetchall()\n",
    "        if len(books) > 0:\n",
    "            for book in books:\n",
    "                print(book[0])\n",
    "        else:\n",
    "            print(\"No books found for the specified author.\")\n",
    "        cursor.close()\n",
    "    except mysql.connector.Error as error:\n",
    "        print(\"Error while fetching data from the database\", error)\n",
    "\n",
    "# Command 3: Display all authors\n",
    "def display_all_authors(conn):\n",
    "    try:\n",
    "        cursor = conn.cursor()\n",
    "        cursor.execute(\"SELECT Author_Name FROM AUTHOR;\")\n",
    "        authors = cursor.fetchall()\n",
    "        for author in authors:\n",
    "            print(author[0])\n",
    "        cursor.close()\n",
    "    except mysql.connector.Error as error:\n",
    "        print(\"Error while fetching data from the database\", error)\n",
    "\n",
    "# Command 4: Add a new Author\n",
    "def add_new_author(conn):\n",
    "    new_author_name = input(\"New author name? \")\n",
    "    try:\n",
    "        cursor = conn.cursor()\n",
    "        cursor.execute(\"INSERT INTO AUTHOR (Author_Name) VALUES (%s);\", (new_author_name,))\n",
    "        conn.commit()\n",
    "        print(\"New author added successfully.\")\n",
    "        cursor.close()\n",
    "    except mysql.connector.Error as error:\n",
    "        print(\"Error while adding the new author to the database\", error)\n",
    "\n",
    "# Main function to display the menu and take user input\n",
    "def main():\n",
    "    conn = connect_to_db()\n",
    "    if conn is None:\n",
    "        print(\"Unable to connect to the database.\")\n",
    "        return\n",
    "\n",
    "    while True:\n",
    "        print(\"Menu:\")\n",
    "        print(\"1. Display all books in the database\")\n",
    "        print(\"2. Display all books by a given author\")\n",
    "        print(\"3. Display all authors\")\n",
    "        print(\"4. Add a new Author\")\n",
    "        print(\"5. Exit\")\n",
    "        choice = input(\"Enter your choice (1-4): \")\n",
    "\n",
    "        if choice == \"1\":\n",
    "            display_all_books(conn)\n",
    "        elif choice == \"2\":\n",
    "            display_books_by_author(conn)\n",
    "        elif choice == \"3\":\n",
    "            display_all_authors(conn)\n",
    "        elif choice == \"4\":\n",
    "            add_new_author(conn)\n",
    "        elif choice == \"5\":\n",
    "            conn.close()\n",
    "            print(\"Goodbye!\")\n",
    "            break\n",
    "        else:\n",
    "            print(\"Invalid choice. Please try again.\")\n",
    "\n",
    "if __name__ == \"__main__\":\n",
    "    main()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "846b8dba",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Collecting mysql-connector-python\n",
      "  Downloading mysql_connector_python-8.1.0-cp39-cp39-win_amd64.whl (10.8 MB)\n",
      "     -------------------------------------- 10.8/10.8 MB 689.5 kB/s eta 0:00:00\n",
      "Collecting protobuf<=4.21.12,>=4.21.1\n",
      "  Downloading protobuf-4.21.12-cp39-cp39-win_amd64.whl (527 kB)\n",
      "     -------------------------------------- 527.0/527.0 kB 1.2 MB/s eta 0:00:00\n",
      "Installing collected packages: protobuf, mysql-connector-python\n",
      "  Attempting uninstall: protobuf\n",
      "    Found existing installation: protobuf 3.20.0\n",
      "    Uninstalling protobuf-3.20.0:\n",
      "      Successfully uninstalled protobuf-3.20.0\n",
      "Successfully installed mysql-connector-python-8.1.0 protobuf-4.21.12\n",
      "Note: you may need to restart the kernel to use updated packages.\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "WARNING: Ignoring invalid distribution -rotobuf (c:\\users\\this pc\\anaconda3\\lib\\site-packages)\n",
      "WARNING: Ignoring invalid distribution -rotobuf (c:\\users\\this pc\\anaconda3\\lib\\site-packages)\n",
      "WARNING: Ignoring invalid distribution -rotobuf (c:\\users\\this pc\\anaconda3\\lib\\site-packages)\n",
      "    WARNING: Ignoring invalid distribution -rotobuf (c:\\users\\this pc\\anaconda3\\lib\\site-packages)\n",
      "WARNING: Ignoring invalid distribution -rotobuf (c:\\users\\this pc\\anaconda3\\lib\\site-packages)\n",
      "WARNING: Ignoring invalid distribution -rotobuf (c:\\users\\this pc\\anaconda3\\lib\\site-packages)\n",
      "ERROR: pip's dependency resolver does not currently take into account all the packages that are installed. This behaviour is the source of the following dependency conflicts.\n",
      "tensorflow-intel 2.11.0 requires protobuf<3.20,>=3.9.2, but you have protobuf 4.21.12 which is incompatible.\n",
      "tensorboard 2.11.2 requires protobuf<4,>=3.9.2, but you have protobuf 4.21.12 which is incompatible.\n",
      "WARNING: Ignoring invalid distribution -rotobuf (c:\\users\\this pc\\anaconda3\\lib\\site-packages)\n",
      "WARNING: Ignoring invalid distribution -rotobuf (c:\\users\\this pc\\anaconda3\\lib\\site-packages)\n",
      "WARNING: Ignoring invalid distribution -rotobuf (c:\\users\\this pc\\anaconda3\\lib\\site-packages)\n"
     ]
    }
   ],
   "source": [
    "pip install mysql-connector-python"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "f4c75f0d",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.13"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
